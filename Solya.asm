; 	Solya (SunBathe Timer & Thermometer)
; 	Kelompok SBK Cherry Trail
;
; 	Referensi
;	https://mil.ufl.edu/3744/docs/lcdmanual/commands.html
;	http://ee-classes.usc.edu/ee459/library/datasheets/DS1620.pdf
;	https://datasheets.maximintegrated.com/en/ds/DS1620.pdf
;	https://rubenlaguna.com/post/2008-08-31-arduino-and-ds1620-digital-temperature-sensor/
;	http://www.circuitstoday.com/interfacing-16x2-lcd-with-8051
;	https://circuitdigest.com/microcontroller-projects/lcd-interfacing-with-8051-microcontroller-89s52
;	http://www.8051projects.info/resources/real-time-clock-interfacing-ds1307-with-at89s51.50/
;	https://exploreembedded.com/wiki/A6.8051_Interfacing:_RTC_DS1307
;	
;	https://datasheets.maximintegrated.com/en/ds/DS1307.pdf
;	https://www.8051projects.net/wiki/I2C_Implementation_on_8051
;
;	Interface
;	P0 0 SOUT DS1307 RTC
;	P0 3 THIGH DS1620 TEMP
;	P0 4 TLOW DS1620 TEMP
;	P0 5 DQ DS1620 TEMP
;	P0 6 CLK DS1620 TEMP
;	P0 7 RST DS1620 TEMP
;	P1 Output menuju LCD
;	P2 0 RS LCD
;	P2 1 RW LCD
;	P2 2 EN LCD
;	P2 3 SDA DS1307 RTC
;	P2 4 SCL DS1307 RTC
;	P3 0 RX
;	P3 1 TX
;	XTAL = 12MHz
;----------------------------- INTERFACE DEFINE
	RS_LCD	EQU P2.0 ;OUT
	RW_LCD 	EQU P2.1 ;OUT
	EN_LCD	EQU P2.2 ;OUT
	DQ_DS	EQU P0.5 ;INOUT
	CLK_DS	EQU P0.6 ;OUT
	RST_DS	EQU P0.7 ;OUT
	TH_DS	EQU P0.3 ;IN
	TL_DS	EQU P0.4 ;IN
	D_LCD	EQU P1	 ;IN
	RX	EQU P3.0 ;IN
	TX	EQU P3.1 ;OUT
	SCL	EQU P2.4 ;INOUT
	SDA	EQU P2.3 ;INOUT
	BUZZ	EQU P2.5 ;OUT
	BTN	EQU P0.2 ;IN
	LED	EQU P2.6 ;OUT
;----------------------------- CUSTOM CHAR DEFINE
	DEG	EQU 223
	TAB	EQU 9
;----------------------------- REGISTER ADDRESSING DEFINE
	DLYR	EQU 0x20 ;Delay Register
	TEMPR	EQU 0x21 ;Temp Register
	KEYR	EQU 0x22 ;Keypad Register
	THTEMP	EQU 0x23 ;Temp High Register
	TLTEMP	EQU 0x24 ;Temp Low Register
	TEMPF	EQU F0	 ;Temp Negative Flag
	TIMEREG	EQU 0x25 ;RTC Register +7 Reserved
	TIMESEC	EQU 0x25 ;RTC Second
	TIMEMIN	EQU 0x26 ;RTC Minute
	TIMEHWR	EQU 0x27 ;RTC Hour
	TIMEDOW	EQU 0x28 ;RTC Day of Week
	TIMEDOM	EQU 0x29 ;RTC Day of Month
	TIMEMON	EQU 0x2A ;RTC Month
	TIMEYRS	EQU 0x2B ;RTC Years
	TIMEDMP	EQU 0x2C ;RTC Second Dump
	TEMPRF	EQU 0x2D ;Temp Last Flag Register
	DISP1	EQU 0x2E ;Register for Display Flags
	SBHWE	EQU 0x2F ;Alarm Hour
	SBMIN	EQU 0x30 ;Alarm Minute
	SBSEC	EQU 0x31 ;Alarm Second
	SBTHWR	EQU 0x32 ;Timer Hour
	SBTMIN	EQU 0x33 ;Timer Minute
	SBTSEC	EQU 0x34 ;Timer Second
	LISTR	EQU 0x35
	MISTR	EQU 0x39
	HISTR	EQU 0x3D
	STR	EQU 0x3E ;Start Register to Save String
;;----------------------------- LCD MODE DEFINE
	CLEAR	EQU 0x01 ;LCD CLEAR
	ONM0	EQU 0x0F ;LCD ON Mode Cursor ON		0000 1111
	ONM1	EQU 0x0E ;LCD ON Mode Cursor Blink	0000 1110
	ONM2	EQU 0x0C ;LCD ON Mode Cursor OFF	0000 1100
	ONM3	EQU 0x08 ;LCD OFF			0000 1011
	L1	EQU 0x80 ;LCD Cursor Line 1
	L2	EQU 0xC0 ;LCD Cursor Line 2
	STDLCD	EQU 0x38 ;STD LCD Setting 2 Line 5x7 Matrix
	CDEC	EQU 0x13 ;Shift Cursor to Left
	CINC	EQU 0x17 ;Shift Cursor to Right
	SRDISP	EQU 0x18 ;Shift Display Right
	SLDISP 	EQU 0x1C ;Shift Display Left
;----------------------------- RTC MODE DEFINE
	STR_RTC	equ 0x00
	W_RTC	equ 0xd0
	R_RTC	equ 0xd1
;----------------------------- CUSTOM VALUE DEFINE
	BOTH	EQU 2
	LCD_ONLY EQU 0
	SERIAL_ONLY EQU 1
	STACK	EQU 0x50
;----------------------------- MACRO
DELAY	MACRO VAL	;DELAY IN MILISECOND
	MOV DLYR, #VAL
	LCALL DLY
	ENDM
DELAYM	MACRO MVAL	;DELAY IN MICROSECOND
	MOV DLYR, #MVAL
	LCALL MDLY
	ENDM
LCD	MACRO CMD	;LCD COMMAND TRANSFER
	CLR RS_LCD
	MOV D_LCD, #CMD
	LCALL LCDWRITE
	ENDM
CURSOR	MACRO X, Y
	MOV A, #X
	MOV B, #Y
	LCALL CURPOS
	ENDM
WRITER 	MACRO VAL	;WRITE 2-DIGIT VALUE TO LCD FROM REGISTER
	SETB RS_LCD
	MOV D_LCD, VAL
	LCALL LCDWRITE
	ENDM
WRITEC	MACRO VAL	;WRITE A CHAR TO LCD
	SETB RS_LCD
	MOV D_LCD, #VAL
	LCALL LCDWRITE
	ENDM
TEMP_RST MACRO		;TEMPERATURE RESET
	CLR RST_DS
	DELAY 10
	ENDM
SERIALW MACRO CHAR	;WRITE SERIAL A CHAR TO SERIAL
	MOV A, CHAR
	LCALL SEND_CHAR
	ENDM
SERIALN MACRO N		;WRITE SERIAL 2-DIGIT VARIABLE FROM REGISTER TO SERIAL
	MOV A, N
	LCALL SEND_NUM
	ENDM
SERIALNL MACRO		;WRITE SERIAL NEW LINE
	MOV A, #13
	LCALL SEND_CHAR
	ENDM
SERIALS MACRO SPACER	;WRITE SERIAL SPACER
	MOV B, #SPACER
	LCALL LOOPSERS
	ENDM
SERIALE MACRO SPACER	;WRITE SERIAL SPACER
	MOV B, #SPACER
	LCALL LOOPSERE
	ENDM
PRINT	MACRO DATA_STR, MODE	;PRINT STRING TO SERIAL AND/OR LCD WITH MODE
	MOV DPTR, #DATA_STR
	MOV A, #MODE
	LCALL PRINTP
	ENDM
PRINTRTC MACRO REGISTER, MODE
	MOV A, #MODE
	MOV B, REGISTER
	LCALL PRINT_RTC
	ENDM
PRINTC MACRO CHAR, MODE
	MOV A, MODE
	MOV B, #CHAR
	LCALL STRIP
	ENDM
BIP	MACRO
	SETB BUZZ
	DELAY 50
	CLR BUZZ
	ENDM
ORG 0x0
;----------------------------- CODE SEGMENT
;------------------------------------------------------------------- MAIN FUNCTION
MAIN:	;INITIAL FUNCTIOM
	;ACALL DEBUGS
	CLR BUZZ
	SETB BTN
	CLR LED
	MOV  SP, #STACK
	MOV THTEMP, #33*2
	MOV TLTEMP, #20*2
	MOV SBHWE, #0x10
	MOV SBTMIN, #0x30
	SETB TH_DS
	SETB TL_DS
	ACALL INIT_TEMP
	ACALL INIT_I2C
	ACALL INIT_SERIAL
	ACALL INIT_LCD
	ACALL SET_TEMP
	PRINT TEXT_INTRO, BOTH
	MOV A, #4
SEC2:	DELAY 250
	DJNZ ACC, SEC2
	LCD CLEAR
	BIP
	PRINT TEXT_MENU, SERIAL_ONLY
;------------------------------------------------------------------- LOOP FUNCTION
LOOP:	;LOOP FUNCTION
	ACALL GET_TEMP
	ACALL GET_RTC
	ACALL CHECK_CONSOLE
	ACALL CHECK_ALARM
	MOV A, TIMESEC
	CJNE A, TIMEDMP, RTCDIFF
	AJMP LOOP
RTCDIFF:
	MOV TIMEDMP, A
	CURSOR L1, 8
	ACALL RTCLCD
	LCD L2
	ACALL DISP_TEMP
	LCD L1
	JB TL_DS, ISCOLD
	JNB TH_DS, ISGOOD
	PRINT TEXT_HOT, LCD_ONLY
	SJMP NEXTP
ISGOOD:	PRINT TEXT_GOOD, LCD_ONLY
	SJMP NEXTP
ISCOLD:	PRINT TEXT_COLD, LCD_ONLY
NEXTP:	AJMP LOOP

;----------------------------- PROCEDURE
;DS1620_PROC-------------------------------------------------------- TEMPERATURE CONTROL
INIT_TEMP: ;RETURN IN RAM LOC 0x48
	TEMP_RST
	MOV A, #0x0C	;CONFIG
	ACALL TEMP_CMD
	MOV A, #0X02	;WRITE CPU CONFIG
	ACALL WRITE
	TEMP_RST
	MOV A, #0XEE	;START CONVERSION
	ACALL TEMP_CMD
	TEMP_RST
	RET
SET_TEMP: ;SET TH, TL
	MOV A, #0X01 	;WRITE TH
	ACALL TEMP_CMD
	MOV A, THTEMP
	ACALL WRITE
	CLR C
	ACALL WRITEBIT
	TEMP_RST
	MOV A, #0X02	;WRITE TL
	ACALL TEMP_CMD
	MOV A, TLTEMP
	ACALL WRITE
	CLR C
	ACALL WRITEBIT
	TEMP_RST
	RET
TEMP_CMD:
	SETB CLK_DS
	SETB RST_DS
WRITE: 	MOV B, #8
WRITEL:	CLR CLK_DS
	DELAYM 40
	JNB ACC.0, NOTBIT
	SETB DQ_DS
	DELAYM 40
	SJMP SKIP1
NOTBIT:	CLR DQ_DS
SKIP1:	RR A
	SETB CLK_DS
	DJNZ B, WRITEL
	RET
WRITEBIT:
	CLR CLK_DS
	DELAYM 40
	JNB CY, NOTBIT0
	SETB DQ_DS
	DELAYM 40
	SJMP SKIP0
NOTBIT0:CLR DQ_DS
SKIP0:	SETB CLK_DS
	RET
GET_TEMP:
	MOV A, #0xAA
	ACALL TEMP_CMD
READ:	MOV B, #8
	CLR TEMPR
	SETB DQ_DS
READL:	MOV A, TEMPR
	RR A
	DELAYM 40
	CLR CLK_DS
	JNB DQ_DS, NOPRINT
	SETB ACC.7
	SJMP SKIPPRINT
NOPRINT:CLR ACC.0
SKIPPRINT:
	MOV TEMPR, A
	DELAYM 40
	SETB CLK_DS
	DELAYM 40
	DJNZ B, READL
	CLR CLK_DS
	JNB DQ_DS, NOPRINT1
	SETB TEMPF
	SJMP SKIPPRINT1
NOPRINT1:CLR TEMPF
SKIPPRINT1:
	DELAYM 40
	SETB CLK_DS
	CLR DQ_DS
	TEMP_RST
	RET
;TIMER_PROC-------------------------------------------------------- TIMER AND DELAY CONTROL
DLY:	;DELAY IN MILISECOND DECIMAL FROM REGISTER 0x49
	MOV R3, A
	MOV A, TMOD
	SETB ACC.0
	CLR ACC.1
	MOV TMOD, A
DRST:	MOV TH0, #0xFC
	MOV TL0, #0x18
	SETB TR0
HERE:	JNB TF0, HERE
	CLR TR0
	CLR TF0
	DJNZ DLYR, DRST
	MOV A, R3
	RET
MDLY:	;DELAY IN MICROSECOND DECIMAL FROM REGISTRER 0X49
	MOV R3, A
	MOV A, TMOD
	SETB ACC.0
	CLR ACC.1
	MOV TMOD, A
	MOV A, #0xFF;
	SUBB A, DLYR
	MOV TH0, #0xFF
	MOV TL0, A
	SETB TR0
MHERE:	JNB TF0, MHERE
	CLR TF0
	CLR TR0
	MOV A, R3
	RET
;LCD_PROC----------------------------------------------------------- LCD DISPLAY CONTROL
INIT_LCD:
	LCD STDLCD
	LCD CLEAR
	DELAY 100
	LCD ONM2
	LCD L1
	RET
LCDPRINT:
	CLR A
	MOV R0, A
LCDPLOOP:
	SETB RS_LCD
	MOV A, R0
	MOVC A, @A+DPTR
	JZ LCDPRINT_EXIT
	MOV D_LCD, A
	ACALL LCDWRITE
	INC R0
	SJMP LCDPLOOP
LCDPRINT_EXIT:
	RET
LCDWRITE:
	CLR RW_LCD
	CLR EN_LCD
	SETB EN_LCD
	CLR EN_LCD
	SETB RW_LCD
	CLR RS_LCD
BUSY:	SETB EN_LCD
	JNB D_LCD.7, NOBUSY ;READ BUSY FLAG
	CLR EN_LCD
	SJMP BUSY
NOBUSY:	CLR EN_LCD
	RET
DISP_TEMP:
	PRINT TEXT_TEMP, LCD_ONLY
	MOV A, TEMPR
	RR A
	MOV R0, A
	JNB TEMPF, POSITIVE
	PRINTC '-', LCD_ONLY
	MOV A, R0
	CPL A
	INC A
	MOV R0, A
POSITIVE:
	MOV A, R0
	CLR ACC.7
	MOV B, #10
	DIV AB
	CJNE A, #0, NOTZERO
	SJMP ISZERO
NOTZERO:
	ADD A, #'0'
	WRITER ACC
ISZERO:	MOV A, #'0'
	ADD A, B
	WRITER ACC
	WRITEC DEG
	WRITEC 'C'
	WRITEC ' '
	WRITEC ' '
	RET
CURPOS:	CJNE A, #L1, ROW2
	LCD L1
	SJMP SETCINT
ROW2:	LCD L2
SETCINT:
	CJNE A, #0, SETC
	RET
SETC:	LCD CINC
	DJNZ B, SETC
	RET
RTCLCD:
	MOV A, TIMESEC
	ANL A, #0xF
	CJNE A, #0, CHECK1
	MOV DISP1, #0
	SJMP CHECK4
CHECK1:	CJNE A, #8, CHECK2
	PRINTRTC TIMEDOM, LCD_ONLY
	WRITEC '/'
	PRINTRTC TIMEMON, LCD_ONLY
	WRITEC '/'
	PRINTRTC TIMEYRS, LCD_ONLY
	CURSOR L2, 14
	WRITEC 'C'
	WRITEC 'T'
	MOV DISP1, #1
CHECK2:	MOV A, DISP1
	CJNE A, #0, CHECK3
CHECK4:	PRINTRTC TIMEHWR, LCD_ONLY
	WRITEC ':'
	PRINTRTC TIMEMIN, LCD_ONLY
	WRITEC ':'
	PRINTRTC TIMESEC, LCD_ONLY
	CURSOR L2, 14
	WRITEC 'S'
	WRITEC 'Y'
	RET
CHECK3:	
	RET
;SERIAL------------------------------------------------------------- SERIAL PRINT AND READ
INIT_SERIAL:
	;DEBUG
	MOV A, TMOD
	ANL A, #0x0F
	SETB ACC.5
	MOV TMOD, A
	MOV TH1, #0XFD
	MOV SCON, #0X50
	SETB TR1
	RET
SEND_STRING:
	CLR A
	MOV R0, A
LOOPSEND:
	MOV A, R0
	MOVC A, @A+DPTR
	JZ ENDSEND
	MOV SBUF, A
SENDS:	JNB TI, SENDS
	CLR TI
	INC R0
	SJMP LOOPSEND
ENDSEND:
	RET
SEND_NUM:
	MOV B, #10
	DIV AB
	MOV R1, B
	MOV B, #'0'
	ADD A, B
	ACALL SEND_CHAR
	MOV A, R1
	ADD A, B
	ACALL SEND_CHAR
	RET
SEND_CHAR:
	SETB TR1
	MOV SBUF, A
SENDC:	JNB TI, SENDC
	CLR TI
	RET
LOOPSERS:
	MOV A, #' '
	ACALL SEND_CHAR
	DJNZ B, LOOPSERS
	RET
LOOPSERE:
	MOV A, #8
	ACALL SEND_CHAR
	DJNZ B, LOOPSERE
	RET
READ_CHAR:
	JNB RI, READ_CHAR
	MOV A, SBUF
	CLR RI
	RET
READ_STRING:
	MOV R1, #STR
RS_LOOP:ACALL READ_CHAR
	CJNE A, #13, RS_CHAR1
	SJMP RS_EXIT
RS_CHAR1:
	CJNE A, #8, RS_CHAR3
	CJNE R1, #STR, RS_CHAR4
	SJMP RS_EXIT
RS_CHAR4:
	DEC R1
	ACALL SEND_CHAR
	SJMP RS_LOOP
RS_CHAR3:
	ACALL SEND_CHAR
	MOV @R1, A
	INC R1
	SJMP RS_LOOP
RS_EXIT:
	MOV A, R1
	SUBB A, #STR
	INC R1
	MOV @R1, #0
	RET
RTCSERIAL:
	PRINTRTC TIMEHWR, SERIAL_ONLY
	SERIALW #':'
	PRINTRTC TIMEMIN, SERIAL_ONLY
	SERIALW #':'
	PRINTRTC TIMESEC, SERIAL_ONLY
	SERIALS 2
	MOV A, TIMEDOW
	DEC A
	MOV B, #5
	MUL AB
	MOV DPTR, #TEXT_DOW
	MOV R0, A
	ACALL LOOPSEND
	PRINTRTC TIMEDOM, SERIAL_ONLY
	SERIALW #'\'
	PRINTRTC TIMEMON, SERIAL_ONLY
	SERIALW #'\'
	PRINTRTC TIMEYRS, SERIAL_ONLY
	RET
;RTC---------------------------------------------------------------- RTC CONTROL
GET_RTC:
	ACALL STARTC
	MOV A, #W_RTC
	ACALL SEND
	MOV A, #STR_RTC
	ACALL SEND
	ACALL RSTART
	MOV A, #R_RTC
	ACALL SEND
	MOV R0, #TIMEREG
	MOV R5, #8
READ_RTC:
	ACALL RECV
	MOV @R0, A
	INC R0
	CJNE R5,#1 , SENDACK
	ACALL NAK
	SJMP NEXT_RTC
SENDACK:
	ACALL ACK
NEXT_RTC:
	DJNZ R5, READ_RTC
	ACALL STOP
	RET
WRITE_RTC:	
	ACALL STARTC
	MOV A, #W_RTC
REACT0:	ACALL SEND
	JB CY, REACT0
	MOV A, #STR_RTC
REACT1:	ACALL SEND
	JB CY, REACT1
	MOV R0, #LISTR
	MOV R1, #7
WRL_RTC:
	MOV A, R1
	ADD A, #'0'
	INC R0
	MOV A, @R0
REACT:	ACALL SEND
	JB CY, REACT
	DJNZ R1, WRL_RTC
	ACALL STOP
	RET
;I2C_COM------------------------------------------------------------ I2C COMMUNICATION
;RAW COPY : https://www.8051projects.net/wiki/I2C_Implementation_on_8051
;***************************************
;Initializing I2C Bus Communication
;***************************************
INIT_I2C:
	setb sda
	setb scl
	ret
 
;****************************************
;ReStart Condition for I2C Communication
;****************************************
rstart:
	clr scl
	setb sda
	setb scl
	DELAYM 5
	clr sda
	ret
 
;****************************************
;Start Condition for I2C Communication
;****************************************
startc:
	setb scl
	DELAYM 5
	clr sda
	clr scl
	ret
 
;*****************************************
;Stop Condition For I2C Bus
;*****************************************
stop:
	clr scl
	clr sda
	DELAYM 5
	setb scl
	setb sda
	ret
 
;*****************************************
;Sending Data to slave on I2C bus
;*****************************************
send:
	mov r7,#08
back:
	clr scl
	DELAYM 5
	rlc a
	mov sda,c
	setb scl
	DELAYM 5
	djnz r7,back
	clr scl
	DELAYM 5
	setb sda
	setb scl
	DELAYM 5
	mov c, sda
	clr scl
	ret
 
;*****************************************
;ACK and NAK for I2C Bus
;*****************************************
ack:
	clr sda
	setb scl
	DELAYM 5
	clr scl
	setb sda
	ret
 
nak:
	setb sda
	setb scl
	DELAYM 5
	clr scl
	setb scl
	ret
 
;*****************************************
;Receiving Data from slave on I2C bus
;*****************************************
recv:
	mov r7,#08
back2:	
	setb sda
	clr scl
	DELAYM 5
	setb scl
	DELAYM 5
	mov c,sda
	rlc a
SDABIT: 
SKIPSDA:
	djnz r7,back2
	DELAYM 5
	clr scl
	clr sda
	DELAYM 5
	ret
;PROGRAM_LOGIC ----------------------------------------------------- CONVERSION AND LOGICAL PROCESS
PRINTP:	
	CJNE A, #0, NJLCD
	ACALL LCDPRINT
	SJMP ENDPRINTP
NJLCD:	CJNE A, #1, LCDSER
	ACALL SEND_STRING
	SJMP ENDPRINTP
LCDSER:
	ACALL LCDPRINT
	ACALL SEND_STRING
ENDPRINTP:
	RET

STRIP:	
	CJNE A, #0, NJLCDSTR
	WRITER B
	SJMP ENDPRINTSTR
NJLCDSTR:
	CJNE A, #1, LCDSERSTR
	SERIALW B
	SJMP ENDPRINTSTR
LCDSERSTR:
	WRITER B
	SERIALW B
ENDPRINTSTR:
	RET

PRINT_RTC:
	MOV R0, A
	MOV A, B
	ACALL RTC2CHAR
	CJNE R0, #LCD_ONLY, MODE0
	WRITER R4
	WRITER R5
	RET
MODE0:	CJNE R0, #SERIAL_ONLY, MODE1
	SERIALW R4
	SERIALW R5
	RET
MODE1:
	WRITER R4
	WRITER R5
	SERIALW R4
	SERIALW R5
	RET
;ADMIN ------------------------------------------------------------- ADMIN MENU
CHECK_CONSOLE:
	MOV TH0, #0
	MOV TL0, #0
	MOV A, TMOD
	ANL A, #0xF0
	SETB ACC.0
	MOV TMOD, A
	SETB TR0
	CLR TF0
CHECK_RI:
	JB TF0, RI_TIMEOUT
	JB RI, RI_INPUT
	SJMP CHECK_RI
RI_TIMEOUT:
	CLR TR0
	CLR TF0
	RET
RI_INPUT:
	MOV A, SBUF
	CLR TR0
	CLR TF0
	CLR RI
	LCD L1
	BIP
	CJNE A, #'1', OP2 
	AJMP OP_SCS
OP2:	CJNE A, #'2', OP5 
	AJMP OP_SST
OP5:	CJNE A, #'3', OP6 
	AJMP OP_STR
OP6:	CJNE A, #'4', OP7
	AJMP OP_STD
OP7:	CJNE A, #'5', OP8 ;HELP
	PRINT TEXT_HELP, SERIAL_ONLY
	RET
OP8:	CJNE A, #'6', OP9 ;ABOUT
	PRINT TEXT_ABOUT1, SERIAL_ONLY
	PRINT TEXT_ABOUT2, SERIAL_ONLY
	RET
OP9:	CJNE A, #'0', OP0 ;RESET
	BIP
	DELAY 50
	BIP
	AJMP OP_RST
OP0:	PRINT TEXT_MENU, SERIAL_ONLY
	RET
OP_SCS: ;SHOW CURRENT STATUS
	ACALL RTCSERIAL
	SERIALS 2
	JB TL_DS, ISCOLD1
	JNB TH_DS, ISGOOD1
	PRINT TEXT_HOT, SERIAL_ONLY
	SJMP NEXTP1
ISGOOD1:PRINT TEXT_GOOD, SERIAL_ONLY
	SJMP NEXTP1
ISCOLD1:PRINT TEXT_COLD, SERIAL_ONLY
NEXTP1:	SERIALS 1
	MOV A, TEMPR
	RR A
	MOV B, #10
	DIV AB
	ADD A, #'0'
	SERIALW ACC
	MOV A, B
	ADD A, #'0'
	SERIALW ACC
	SERIALS 1
	SERIALW #'C'
	PRINT TEXT_ALARM, SERIAL_ONLY
	MOV R1, #SBHWE
OP_SCTL:MOV A, @R1
	ACALL RTC2CHAR
	SERIALW R4
	SERIALW R5
	INC R1
	CJNE R1, #SBTHWR, NO_TRANS
	PRINT TEXT_TIMER, SERIAL_ONLY
	SJMP OP_SCTL
NO_TRANS:
	SERIALW #':'
	CJNE R1, #LISTR, OP_SCTL
	PRINT TEXT_THTEMP, SERIAL_ONLY
	MOV A, THTEMP
	RR A
	ACALL PRINT2DIG
	SERIALS 1
	SERIALW #'C'
	SERIALNL
	PRINT TEXT_TLTEMP, SERIAL_ONLY
	MOV A, TLTEMP
	RR A
	ACALL PRINT2DIG
	SERIALS 1
	SERIALW #'C'
	SERIALNL
	SERIALNL
	RET
OP_STR:	;SET TEMP RANGE
	PRINT TEXT_OP, LCD_ONLY
	LCD L2
	WRITEC ' '
	PRINT TEXT_OP_STR, BOTH
	PRINT TEXT_OP_STR2, SERIAL_ONLY
	ACALL READ_STRING
	CJNE A, #5, OP_STRCL
	MOV R1, #STR
	ACALL CHAR2TEMP
	MOV TLTEMP, A
	ACALL CHAR2TEMP
	MOV THTEMP, A
	ACALL SET_TEMP
	AJMP OP_SAVE
OP_STRCL: AJMP OP_CANCEL
OP_SST:	;SET SUNBATHE ALARM & TIMER
	PRINT TEXT_OP, LCD_ONLY
	LCD L2
	PRINT TEXT_OP_SST, BOTH
	PRINT TEXT_OP_SST2, SERIAL_ONLY
	ACALL READ_STRING
	CJNE A, #17, OP_CANCEL
	MOV R1, #STR
	MOV R0, #SBHWE
OP_SSTL:
	ACALL CHAR2RTC
	MOV @R0, A
	INC R0
	CJNE R0, #LISTR, OP_SSTL
	AJMP OP_SAVE
OP_STD:
	PRINT TEXT_OP, LCD_ONLY
	LCD L2
	PRINT TEXT_OP_STD, BOTH
	PRINT TEXT_OP_STD2, SERIAL_ONLY
	ACALL READ_STRING
	CJNE A, #17, OP_CANCEL
	MOV R1, #STR
	MOV R0, #MISTR
	DEC R0
	CLR F0
OP_STDL:
	ACALL CHAR2RTC
	MOV @R0, A
	JB F0, OP_INC
	DEC R0
	SJMP OP_DEC
OP_INC:	INC R0
OP_DEC:	CJNE R0, #LISTR, UNNOL
	SETB F0
	MOV R0, #MISTR
	INC R0
UNNOL:	CJNE R0, #HISTR, OP_STDL
	ACALL WRITE_RTC
OP_SAVE:
	PRINT TEXT_SAVE, SERIAL_ONLY
	LCD CLEAR
	RET
OP_CANCEL:
	PRINT TEXT_CANCEL, SERIAL_ONLY
	LCD CLEAR
	BIP
	DELAY 50
	BIP
	RET
PRINT2DIG:
	MOV B, #10
	DIV AB
	CJNE A, #0, OP_SCR_NZ
	SJMP OP_SCR_Z
OP_SCR_NZ:
	ADD A, #'0'
	SERIALW ACC
OP_SCR_Z:
	MOV A, B
	ADD A, #'0'
	SERIALW ACC
	RET
OP_RST:	MOV R0, #0x80
OP_RSTL:MOV @R0, #0
	DJNZ R0, OP_RSTL
	AJMP MAIN
CHAR2RTC:
	MOV A, @R1
	CLR C
	SUBB A, #'0'
	MOV B, #0x10
	MUL AB
	INC R1
	MOV B, A
	MOV A, @R1
	CLR C
	SUBB A, #'0'
	ADD A, B
	INC R1
	INC R1
	RET
CHAR2TEMP:
	MOV A, @R1
	SUBB A, #'0'
	MOV B, #10
	MUL AB
	INC R1
	MOV B, A
	MOV A, @R1
	SUBB A, #'0'
	ADD A, B
	RLC A
	INC R1
	INC R1
	RET
RTC2CHAR:
	MOV B, #0x10
	DIV AB
	ADD A, #'0'
	MOV R4, A
	MOV A, B
	ADD A, #'0'
	MOV R5, A
ANOTEQ:	RET
CHECK_ALARM:
	MOV A, TIMESEC
	CJNE A, SBSEC, ANOTEQ
	MOV A, TIMEMIN
	CJNE A, SBMIN, ANOTEQ
	MOV A, TIMEHWR
	CJNE A, SBHWE, ANOTEQ
	LCD CLEAR
	LCD L1
	PRINT TEXT_ALARMING, BOTH
	SERIALNL
	CURSOR L2, 2
	PRINT TEXT_ALARMING2, BOTH
	PRINT TEXT_ALARMING3, SERIAL_ONLY
	MOV R0, #20
	SETB F0
BEEP:	CPL BUZZ
	CPL F0
	MOV R1, #4
DLOOP:	JNB BTN, ACK_ALARM
	JB RI, ACK_ALARM
	DELAY 125
	DJNZ R1, DLOOP
	JB F0, LCDOFF
	LCD ONM3
	SJMP LCDON
LCDOFF:	LCD ONM2
LCDON:	DJNZ R0, BEEP
EXCEED:	CLR LED
	LCD CLEAR
	LCD ONM2
	LCD L1
	PRINT TEXT_TIMEOUT, BOTH
	MOV DISP1, #0
	LCD CLEAR
	MOV R1, #4
	SETB BUZZ
ANOTEQL:
	DELAY 250
	DJNZ R1, ANOTEQL
	CLR BUZZ
	RET
ACK_ALARM:
	SETB LED
	JNB BTN, ACK_ALARM
	CLR RI
	CLR BUZZ
	LCD ONM2
	SETB BUZZ
	DELAY 100
	LCD CLEAR
	CLR BUZZ
	DELAY 100
	LCD L1
	SETB BUZZ
	DELAY 100
	CLR BUZZ
	PRINT TEXT_SUNBATHE, BOTH
	PRINT TEXT_SUNBATHE2, SERIAL_ONLY
	SERIALNL
	SERIALNL
	LCALL OP_SCS
	MOV DISP1, #0
TIMERLOOP:
	LCALL GET_RTC
	MOV A, TIMESEC
	CJNE A, TIMEDMP, TLUPDATE
	SJMP TIMERLOOP
TLUPDATE: 
	MOV TIMEDMP, A
	CJNE A, SBTSEC, NOTTO
	MOV A, TIMEMIN
	CJNE A, SBTMIN, NOTTO
	MOV A, TIMEHWR
	CJNE A, SBTHWR, NOTTO
	SJMP TIMEOUT
NOTTO:
	LCD L2
	LCALL RTCLCD
	JNB BTN, TIMEOUT
	SJMP TIMERLOOP
TIMEOUT:AJMP EXCEED
ORG 0xB00

;----------------------------- DATA SEGMENT
TEXT_INTRO: 	DB 'Welcome to Solya',13,13,0
TEXT_OP:	DB ' ADMIN  SETTING ',0
TEXT_OP_STD:	DB 'Set Time & Date ',0
TEXT_OP_SST:	DB 'Setting SunBathe',0
TEXT_OP_STR:	DB 'Set Temp Range  ',0
TEXT_TEMP:	DB 'TEMP: ',0
TEXT_HOT:	DB 'HOT ',0
TEXT_GOOD:	DB 'GOOD',0
TEXT_COLD:	DB 'COLD',0
TEXT_DOW:	DB 'SUN ',0
		DB 'MON ',0
		DB 'TUE ',0
		DB 'WED ',0
		DB 'THU ',0
		DB 'FRI ',0
		DB 'SAT ',0
TEXT_MENU:	DB 'Console Menu : ',13
		DB '1. Show Current SunBathe Alarm & Timer', 13
		DB '2. Set SunBathe Alarm & Timer', 13
		DB '3. Set Temperature Range', 13
		DB '4. Set Date & Time', 13
		DB '5. Help', 13
		DB '6. About', 13,13
		DB '0. Reset', 13,13,0
TEXT_SAVE:	DB 13,'Configuration Save...',13,13, 0
TEXT_CANCEL:	DB 13,'Configuration Cancel...',13,13, 0
TEXT_THTEMP:	DB 8, 13,13,'Max Temp : ',0
TEXT_TLTEMP:	DB 'Min Temp  : ',0
TEXT_OP_STD2:	DB 13,'Input String Time & Date (hh:mm:ss DD/MM/YY)',13,0
TEXT_OP_STR2:	DB 13,'Input String LowTemp-HighTemp (LL-HH) Non Negative',13,0
TEXT_OP_SST2:	DB 13,'Input String Start & Finish time (hh:mm:ss hh:mm:ss)',13, 0
TEXT_ABOUT1:    DB 13,'Solya merupakan alat yang digunakan sebagai salah satu'
	        DB 13,'alat dapat membantu mencegah virus COVID19 yang merupakan'
	        DB 13,'SunBathe Timer & Temperature.',13
	        DB 13,'Kelompok Cherry Trail',0
TEXT_ABOUT2:    DB 13,'Alfian Badrul Isnan - 1806148643'
		DB 13,'Nadhifa Khalisha Anandra - 1806148800'
	        DB 13,'Natalia Kristian - 1806200103',13
	        DB 13,'PROYEK AKHIR MATA KULIAH'
	        DB 13,'SISTEM BERBASIS KOMPUTER', 13,13,0
TEXT_HELP:	DB 13,'Sebelum menggunakan, silahkan set waktu berjemur dan timer nya pada opsi yang tersedia...',13,13, 0
TEXT_TIMER:	DB '  End At : ',0
TEXT_ALARM:	DB 13, 'Start At : ',0
TEXT_ALARMING:	DB 'TIME TO SUNBATHE',0
TEXT_ALARMING2:	DB   'PRESS BUTTON',0
TEXT_ALARMING3:	DB ' TO CONTINUE \ ANY KEY FROM CONSOLE',13,13,0
TEXT_SUNBATHE:	DB 'Happy SunBathing',0
TEXT_SUNBATHE2:	DB 13,'To Abort Timer Countdown, Press Any Key',13,'from Console or Press Button',13,0
TEXT_TIMEOUT:	DB 'TIMEOUT EXCEEDED',13,0
end

